!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e){},function(t,e,n){var r=n(2);"string"==typeof r&&(r=[[t.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,a);r.locals&&(t.exports=r.locals)},function(t,e,n){(e=n(3)(!1)).push([t.i,"/* Icons for bootstrap 4 */\r\n\r\n.mdi::before {\r\n    font-size: 24px;\r\n    line-height: 14px;\r\n}\r\n\r\n.btn .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.btn-xs .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.btn-sm .mdi::before {\r\n    font-size: 18px;\r\n    top: 3px;\r\n}\r\n\r\n.dropdown-menu .mdi {\r\n    width: 18px;\r\n}\r\n\r\n.dropdown-menu .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    left: -8px;\r\n}\r\n\r\n.nav .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.navbar .navbar-toggle .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    color: #FFF;\r\n}\r\n\r\n.breadcrumb .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n}\r\n\r\n.breadcrumb a:hover {\r\n    text-decoration: none;\r\n}\r\n\r\n.breadcrumb a:hover span {\r\n    text-decoration: underline;\r\n}\r\n\r\n.alert .mdi::before {\r\n    position: relative;\r\n    top: 4px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.input-group-addon .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n}\r\n\r\n.navbar-brand .mdi::before {\r\n    position: relative;\r\n    top: 2px;\r\n    margin-right: 2px;\r\n}\r\n\r\n.list-group-item .mdi::before {\r\n    position: relative;\r\n    top: 3px;\r\n    left: -3px\r\n}\r\n\r\n/* SVG elements and text */\r\n\r\n#main-vis {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.svg-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-content {\r\n    display: inline-block;\r\n    position: absolute;\r\n    border: 1px solid #000;\r\n}\r\n\r\n#main-vis-legend-div {\r\n    display: none;\r\n}\r\n\r\n#hierarchy-legend-div {\r\n    display: none;\r\n}\r\n\r\n#main-vis-legend {\r\n    float: right;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n#hierarchy-legend {\r\n    float: left;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: visible;\r\n    top: 10px;\r\n    left: 10px;\r\n}\r\n\r\n.svg-content-dendrogram {\r\n    display: inline-block;\r\n    border: 1px solid #000;\r\n}\r\n\r\n.svg-line-chart-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: auto;\r\n    /* depends on svg ratio */\r\n    padding-bottom: 17%;\r\n    /* aspect ratio */\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.svg-dendrogram-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    height: auto;\r\n    vertical-align: top;\r\n    overflow: visible;\r\n}\r\n\r\n.axis path {\r\n    display: none;\r\n}\r\n\r\n.axis line {\r\n    stroke-opacity: 0.3;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.x {\r\n    font-size: 1em;\r\n}\r\n\r\n.y {\r\n    font-size: 1em;\r\n}\r\n\r\n.axis-line-chart path line {\r\n    fill: none;\r\n    stroke: #000;\r\n    shape-rendering: crispEdges;\r\n}\r\n\r\n.line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n}\r\n\r\n/* Time  */\r\n\r\n.frame-text {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    font-size: 2em;\r\n    color: inherit;\r\n    font-weight: 500;\r\n    line-height: 1.1;\r\n}\r\n\r\n/* Slider ticks  */\r\n\r\n.ui-slider-tick {\r\n    display: inline-block;\r\n    width: 3px;\r\n    background: #337ab7;\r\n    height: 0.8em;\r\n    position: absolute;\r\n}\r\n\r\n/* Laoding gif   */\r\n\r\n#loading {\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n/* Color legend    */\r\n\r\n.legend {\r\n    font-size: 12px;\r\n    stroke: #000;\r\n}\r\n\r\n.legend-text {\r\n    font-size: 1.2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.line-chart-legend-text {\r\n    font-size: 2em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.time-line {\r\n    fill: none;\r\n    stroke-width: 5px;\r\n    stroke: #000;\r\n}\r\n\r\n/*swarm features */\r\n\r\n.centroid {\r\n    fill-opacity: 0;\r\n    stroke: #e7298a;\r\n    stroke-width: 3px;\r\n}\r\n\r\n.medoid {\r\n    fill: #e7298a !important;\r\n    stroke: #e7298a !important;\r\n}\r\n\r\n.hull-path {\r\n    fill: #fff;\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #252525;\r\n    stroke-opacity: 0.5;\r\n}\r\n\r\n.hierarchy-group {\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.2;\r\n}\r\n\r\n.delaunay-triangulation {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n    stroke: #000;\r\n    stroke-opacity: 0.4;\r\n}\r\n\r\n/* Color brewer picker div */\r\n\r\n.palette {\r\n    cursor: pointer;\r\n    display: table;\r\n    vertical-align: bottom;\r\n    margin: 4px 0 4px 4px;\r\n    background: #fff;\r\n    border: solid 1px #aaa;\r\n}\r\n\r\n.swatch {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    width: 22px;\r\n    height: 22px;\r\n}\r\n\r\n.voronoi {\r\n    fill-opacity: 0;\r\n    stroke-width: 3;\r\n    stroke: #000;\r\n    stroke-opacity: 0.2;\r\n}\r\n\r\n/* Tooltip */\r\n\r\ndiv.tooltip {\r\n    pointer-events: none;\r\n    opacity: 0;\r\n    background: rgb(255, 255, 255) !important;\r\n    border-left-color: #1b809e !important;\r\n    border: 1px solid #eee;\r\n    border-left-width: 5px;\r\n    border-radius: 3px;\r\n    position: absolute;\r\n}\r\n\r\ndiv.tooltip table td:nth-child(2) {\r\n    text-align: center;\r\n    font-weight: bold;\r\n}\r\n\r\n.tooltip-span {\r\n    display: block;\r\n    width: 150px;\r\n    word-wrap: break-word;\r\n    font-size: 1.5em;\r\n}\r\n\r\n.upper-outer-area, .lower-outer-area {\r\n    stroke-width: 1;\r\n    fill: #74a9cf;\r\n    stroke: #3690c0;\r\n}\r\n\r\n.upper-inner-area, .lower-inner-area {\r\n    stroke-width: 1;\r\n    fill: #045a8d;\r\n    stroke: #023858;\r\n}\r\n\r\n.median-line {\r\n    fill: none;\r\n    stroke: #525252;\r\n    stroke-width: 5;\r\n}\r\n\r\n.selected {\r\n    background: #999;\r\n    border: 4px solid #4d4d4d;\r\n    -moz-border-radius: 5px;\r\n    -webkit-border-radius: 5px;\r\n    box-shadow: 1px 2px 4px rgba(0, 0, 0, .4);\r\n}\r\n\r\n.zoom {\r\n    fill: none;\r\n    pointer-events: all;\r\n}\r\n\r\n.x.axis-line-chart>g>text {\r\n    font-size: 3em;\r\n    color: inherit;\r\n    line-height: 1.1;\r\n}\r\n\r\n.arrow {\r\n    stroke-width: 1;\r\n}\r\n\r\n#centroid-line {\r\n    stroke-width: 1;\r\n    stroke: #e7298a;\r\n}\r\n\r\n#centroid-arrow {\r\n    fill: #e7298a;\r\n}\r\n\r\n.metadata-swatch {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 3px;\r\n    border: 2px solid #666;\r\n}\r\n\r\n.metadata-swatch-clickable:hover {\r\n    border: 2px solid #000;\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-menu {\r\n    min-width: 40px;\r\n    padding: 5px;\r\n}\r\n\r\n.metadata-legend {\r\n    list-style: none;\r\n    margin-top: 10px;\r\n}\r\n\r\n.metadata-legend li {\r\n    float: left;\r\n    margin-right: 10px;\r\n}\r\n\r\n.metadata-legend span {\r\n    border: 2px solid #666;\r\n    float: left;\r\n    width: 30px;\r\n    height: 30px;\r\n}\r\n\r\n.metadata-legend .bl-avg {\r\n    background-color: #7fc97f;\r\n}\r\n\r\n.metadata-legend .avg {\r\n    background-color: #fdc086;\r\n}\r\n\r\n.metadata-legend .ab-avg {\r\n    background-color: #386cb0;\r\n}\r\n\r\n.network-edges {\r\n    fill-opacity: 0;\r\n    stroke-width: 2;\r\n}\r\n\r\n.network-background-edges {\r\n    fill-opacity: 0;\r\n    stroke-opacity: 0.25;\r\n    stroke: #737373;\r\n}\r\n\r\n.node text {\r\n    font: 12px sans-serif;\r\n}\r\n\r\n.node--internal text {\r\n    text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;\r\n}\r\n\r\n.link {\r\n    fill: none;\r\n    stroke: #636363;\r\n    stroke-width: 5px;\r\n}\r\n\r\n#active-network-name {\r\n    font-weight: bold;\r\n    color: #296292;\r\n}\r\n\r\n.active-level {\r\n    fill: #386cb0;\r\n}\r\n\r\n#dendrogram-panel {\r\n    position: initial;\r\n}\r\n\r\n#dendrogram-panel {\r\n    display: none\r\n}\r\n\r\n.show-dendrogram {\r\n    float: right;\r\n    border-radius: 3px;\r\n    border: 1px solid #D1D3D4;\r\n    font-weight: normal;\r\n}\r\n\r\n.show-dendrogram:hover {\r\n    background: #D1D3D4;\r\n}\r\n\r\n.dendrogram-text {\r\n    font-size: 10em !important;\r\n}\r\n\r\n.highlight-hierarchy {\r\n    fill: #252525;\r\n    stroke: #252525;\r\n    stroke-width: 10;\r\n    stroke-linejoin: round;\r\n    opacity: 0.3;\r\n}\r\n\r\n.animal-highlight {\r\n    fill: #c51b7d !important;\r\n}\r\n\r\n#dendrogram-buttons-div .btn span.glyphicon {\r\n    opacity: 0;\r\n}\r\n\r\n#dendrogram-buttons-div .btn.active span.glyphicon {\r\n    opacity: 1;\r\n}\r\n\r\n#dendrogram-buttons-div {\r\n    border: 2px solid #D1D3D4;\r\n    border-radius: 5px;\r\n}\r\n\r\n#dendrogram-legend {\r\n    margin-left: 20px;\r\n}\r\n\r\n.intersection {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.sym-difference {\r\n    fill: url(#striped) !important;\r\n    stroke: #67000d;\r\n}\r\n\r\n.modal-lg {\r\n    max-width: 80%;\r\n}\r\n\r\n.background-image {\r\n    background: #fff;\r\n}",""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var a=(o=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(s," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([a]).join("\n")}var o,l,s;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var l=0;l<t.length;l++){var s=[].concat(t[l]);r&&a[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),e.push(s))}},e}},function(t,e,n){var r,a,i={},o=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=r.apply(this,arguments)),a}),l=function(t){return document.querySelector(t)},s=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=l.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),d=null,c=0,p=[],u=n(5);function h(t,e){for(var n=0;n<t.length;n++){var r=t[n],a=i[r.id];if(a){a.refs++;for(var o=0;o<a.parts.length;o++)a.parts[o](r.parts[o]);for(;o<r.parts.length;o++)a.parts.push(y(r.parts[o],e))}else{var l=[];for(o=0;o<r.parts.length;o++)l.push(y(r.parts[o],e));i[r.id]={id:r.id,refs:1,parts:l}}}}function f(t,e){for(var n=[],r={},a=0;a<t.length;a++){var i=t[a],o=e.base?i[0]+e.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[o]?r[o].parts.push(l):n.push(r[o]={id:o,parts:[l]})}return n}function m(t,e){var n=s(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=p[p.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),p.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=s(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,a)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=p.indexOf(t);e>=0&&p.splice(e,1)}function v(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),b(e,t.attrs),m(t,e),e}function b(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function y(t,e){var n,r,a,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var o=c++;n=d||(d=v(e)),r=k.bind(null,n,o,!1),a=k.bind(null,n,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(e,t.attrs),m(t,e),e}(e),r=C.bind(null,n,e),a=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(e),r=$.bind(null,n),a=function(){g(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else a()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return h(n,e),function(t){for(var r=[],a=0;a<n.length;a++){var o=n[a];(l=i[o.id]).refs--,r.push(l)}t&&h(f(t,e),e);for(a=0;a<r.length;a++){var l;if(0===(l=r[a]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete i[l.id]}}}};var x,w=(x=[],function(t,e){return x[t]=e,x.filter(Boolean).join("\n")});function k(t,e,n,r){var a=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(e,a);else{var i=document.createTextNode(a),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(i,o[e]):t.appendChild(i)}}function $(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function C(t,e,n){var r=n.css,a=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&a;(e.convertToAbsoluteUrls||i)&&(r=u(r)),a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var o=new Blob([r],{type:"text/css"}),l=t.href;t.href=URL.createObjectURL(o),l&&URL.revokeObjectURL(l)}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var a,i=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(a=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")}))}},function(t,e,n){"use strict";let r,a;function i(){let t=D,e=Y;for(var n=d3.event.selection,r=0;r<It.length;r++){var a=[t[r].p[0],t[r].p[1]];n[0][0]<=a[0]&&a[0]<=n[1][0]&&n[0][1]<=a[1]&&a[1]<=n[1][1]&&e.push(t[r].a)}K(e),$("#play-button").hasClass("active")||(q(),V()),$("#brushing-button").removeClass("active"),$(".brush").remove()}n.r(e),n.d(e,"dataset",(function(){return Bt})),n.d(e,"datasetMetadata",(function(){return Ut})),n.d(e,"swarmData",(function(){return Rt})),n.d(e,"dataSetPercentile",(function(){return Nt})),n.d(e,"networkData",(function(){return Wt})),n.d(e,"networkHierarchy",(function(){return Pt})),n.d(e,"animalIds",(function(){return It})),n.d(e,"addToDataset",(function(){return Gt})),n.d(e,"setDataSetPercentile",(function(){return Ht})),n.d(e,"setMetaData",(function(){return Yt})),n.d(e,"setSwarmData",(function(){return Ft})),n.d(e,"setDatasetFeature",(function(){return Vt})),n.d(e,"setNetworkData",(function(){return Zt})),n.d(e,"setHierarchyData",(function(){return qt})),n.d(e,"setAnimalIds",(function(){return Jt}));let o,l={type:"Linear",color:colorbrewer.BuYlBu};function s(){return"Linear"===l.type?d3.scaleLinear().domain(Nt[G]).range(l.color):"Threshold"===l.type?d3.scaleThreshold().domain(Nt[G]).range(l.color):void 0}function d(){let t,e;if($("#main-vis-legend-div").show(),"black"!==G){var n=s();t=o.selectAll("rect.legend").data(n.range()),e=o.selectAll("text.legend-text").data(n.domain())}else t=o.selectAll("rect.legend").data([]),e=o.selectAll("text.legend-text").data([]),$("#main-vis-legend-div").hide();t.style("fill",(function(t){return t})),t.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(t,e){return 50+50*e+"px"})).style("fill",(function(t){return t})),t.exit().remove(),e.text((function(t){return Math.ceil(2*t)/2})),e.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(t,e){return 50+50*e+5+"px"})).text((function(t){return Math.ceil(2*t)/2})),e.exit().remove()}let c={};function p(){u();let t=$("#group-metadata .btn.btn-default.active input").attr("value"),e=$("#bl-avg").val(),n=$("#ab-avg").val(),r=["#7fc97f","#fdc086","#386cb0"];for(let a=0;a<Ut.length;a++)Ut[a][t]<e?c[Ut[a].animal_id]=r[0]:Ut[a][t]>n?c[Ut[a].animal_id]=r[2]:c[Ut[a].animal_id]=r[1]}function u(){c={},$(".dropdown #preview").css("background-color","rgb(255, 255, 255)")}var h=n(0);let f,m,g=!0;function v(){$("#play-button").click((function(){!0===$("#play-button").hasClass("active")?(g=!1,$(".mdi-pause").hide(),$(".mdi-play").show()):(g=!0,$(".mdi-play").hide(),$(".mdi-pause").show(),Z(r.slider("value")),$(".brush").remove(),V())})),$("#next-frame-button").click((function(){!0===$("#play-button").hasClass("active")&&(g=!1),$("#play-button").removeClass("active"),V()})),$("#brushing-button").click((function(){g=!1,$("#play-button").removeClass("active"),$("#brushing-button").hasClass("active")?$(".brush").remove():(f=d3.brush().extent([[0,0],[E,S]]).on("end",i),d3.select("#main-vis-svg").append("g").attr("class","brush").call(f))})),$("#remove-active-selected-button").click((function(){$("#remove-active-selected-button").is(":disabled")||($("#remove-active-selected-button").prop("disabled",!0),K([]),Object(h.resetTrackedData)(),$("#visual-parameter-button").prop("disabled",!0).removeClass("active"),$("#play-button").hasClass("active")||(q(),V()))})),$("#visual-parameter-button").click((function(){!0===$("#visual-parameter-button").hasClass("active")?Object(h.setTrackingBoolean)(!1):Object(h.setTrackingBoolean)(!0)})),$("#calculate-parameter-button").click((function(){$("#calculate-parameter-button").hasClass("active")||(Object(h.setTrackingBoolean)(!1),Object(h.sendTrackedData)(),$("#calculate-parameter-button").prop("disabled",!0),$("#calculate-parameter-button").removeClass("active"),$("#visual-parameter-button").removeClass("active"))})),$("#background-color").change((function(){let t=$('input[type="radio"].group-background:checked').val();$("#main-vis-svg").css("background-color",t)})),$("#draw-axis").on("change",(function(){this.checked?($("#main-vis g.x.axis").show(),$("#main-vis g.y.axis").show()):($("#main-vis g.x.axis").hide(),$("#main-vis g.y.axis").hide())})),$("#draw-time").on("change",(function(){this.checked?$("#main-vis .frame-text").show():$("#main-vis .frame-text").hide()})),$("#network-background").on("change",(function(){this.checked?At(!0):At(!1)})),$("#network-background-limit").val(1),$("#network-background-limit").on("change",(function(){let t=$(this).val();$.isNumeric(t)&&t>0?kt=t:$(this).val(1)})),$("#color-scale-radio-form input").on("change",(function(){l.type=$("input[name=color-scale-radio]:checked","#color-scale-radio-form").val(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-direction").click((function(){$("#draw-direction").is(":checked")?("direction"in Bt[0]||(y(),Dt("direction")),$(".arrow").show()):$(".arrow").hide(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-medoid").click((function(){$("#draw-medoid").is(":checked")?("medoid"in Rt[0]||zt("medoid"),X(Rt[I].medoid),d3.selectAll("#animal-"+H).classed("medoid",!0)):(d3.selectAll("#animal-"+H).classed("medoid",!1),X(-1))})),$("#draw-centroid").click((function(){$("#draw-centroid").is(":checked")?("centroid"in Rt[0]||zt("centroid"),$("#g-centroid").show()):$("#g-centroid").hide()})),$("#draw-convex-hull").click((function(){$("#draw-convex-hull").is(":checked")&&("hull"in Rt[0]||zt("convex_hull"))})),$("#draw-triangulation").click((function(){$("#draw-triangulation").is(":checked")&&("triangulation"in Rt[0]||zt("triangulation"),$("#play-button").hasClass("active")||(q(),V()))})),$("#draw-voronoi").click((function(){$("#draw-voronoi").is(":checked")&&("voronoi"in Rt[0]||zt("voronoi"),$("#play-button").hasClass("active")||(q(),V()))})),$("#draw-speed").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-speed").is(":checked")?("speed"in Bt[0]||(y(),Dt("speed")),$("#draw-speed-details").show(),$("#draw-acceleration").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),J("speed")):($("#draw-speed-details").hide(),J("black")),d3.selectAll(".colorLegend *").remove(),d(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-acceleration").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-acceleration").is(":checked")?("acceleration"in Bt[0]||(y(),Dt("acceleration")),$("#draw-acceleration-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),J("acceleration")):($("#draw-acceleration-details").hide(),J("black")),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),d(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-distance_centroid").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-distance_centroid").is(":checked")?("distance_centroid"in Bt[0]||(y(),Dt("distance_centroid")),$("#draw-distance_centroid-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-acceleration").prop("checked",!1),$("#draw-midline_offset").prop("checked",!1),J("distance_centroid")):($("#draw-distance_centroid-details").hide(),J("black")),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),d(),$("#play-button").hasClass("active")||(q(),V())})),$("#draw-midline_offset").click((function(){$(".draw-details").hide().find("input:checkbox").prop("checked",!0).click(),$("#draw-midline_offset").is(":checked")?("draw-midline_offset"in Bt[0]||(y(),Dt("midline_offset")),$("#draw-midline_offset-details").show(),$("#draw-speed").prop("checked",!1),$("#draw-acceleration").prop("checked",!1),$("#draw-distance_centroid").prop("checked",!1),J("midline_offset")):J("black"),$(".draw-details.active").click(),d3.selectAll(".colorLegend *").remove(),d(),$("#play-button").hasClass("active")||(q(),V())})),$(".metadata-swatch.metadata-swatch-clickable").click((function(){let t=$(this).attr("value"),e=$(this).css("background-color");$("#metadata-row-"+t+" #preview").css("background-color",e),"rgb(255, 255, 255)"===e?c[t]&&delete c[t]:c[t]=e})),$("#group-metadata :input").change((function(){u();let t=$(this).attr("value"),e=[];if("sex"===t){$("#metadata-div").modal("toggle");for(let n=0;n<Ut.length;n++)e.push(Ut[n][t].toLowerCase());e=Array.from(new Set(e));let n=["#7fc97f","#386cb0"];for(let r=0;r<Ut.length;r++)for(let a=0;a<e.length;a++)Ut[r][t].toLowerCase()===e[a]&&(c[Ut[r].animal_id]=n[a]);$("#metadata-input").hide()}else{$("#metadata-input").show();for(let n=0;n<Ut.length;n++)e.push(Ut[n][t]);let n=d3.quantile(e,.25),r=d3.quantile(e,.75);$("#bl-avg").val(n),$("#ab-avg").val(r),p()}})),$(".number-spinner button").click((function(){let t=$(this),e=t.closest(".number-spinner").find("input").val().trim(),n=0;n="up"==t.attr("data-dir")?parseFloat(e)+.1:e>0?parseFloat(e)-.1:0,n=Math.round(100*n)/100,t.closest(".number-spinner").find("input").val(n),p()})),$(".number-spinner input").on("input",(function(){p()})),$("#metadata-reset").click((function(){$("#metadata-input").hide(),u()})),$("#networks-modal-body button").click((function(){let t=$(this).attr("data");$("#active-network-name").text($(this).attr("name")),y(),function(t){$.ajax({url:"/api/dataset/network/"+parameters.id+"/"+t,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(t){t.length&&Zt(JSON.parse(t[0].data)),x()}}),Tt(t)}(t),_t(t),$("#network-div").modal("toggle")})),$("#network-remove").click((function(){Zt({}),Tt(-1),_t(-1),$("#active-network-name").text("")})),$("#network-auto-suggest").click((function(){if($("#network-auto-suggest").hasClass("active")){$("#network-limit-p").show(),$("#network-slider").show(),Ct(!1);let t=$("#network-slider").slider("value");Lt(t),$("#network-limit").val(t)}else $("#network-limit-p").hide(),$("#network-slider").hide(),Ct(!0)})),$(".hiearchy-checkbox").on("change",(function(){let t=$(this),e=t.attr("data"),n=t.attr("name");if(t.prop("checked")&&$(".show-dendrogram").length<rt)y(),r=e,$.ajax({url:"/api/dataset/network/hierarchy/"+parameters.id+"/"+r,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(t){t.length&&qt(JSON.parse(t[0].hierarchy),r),x()}}),function(t,e){$(".show-dendrogram").length<rt&&($("#dendrogram-buttons-div").append('<button type="button" id="show-dendrogram-'+t+'" data='+t+" name="+e+' class="show-dendrogram btn btn-block" data-toggle="button" aria-pressed="false" autocomplete="off"> <span class="btn-label" id="btn-left"> <i class="mdi mdi-arrow-collapse-left"></i>&nbsp&nbsp Show '+e+'</span><span class="btn-label" id="btn-right"> <i class="mdi mdi-arrow-collapse-right"></i>&nbsp&nbsp Hide '+e+" </span></button> <br>"),$("#show-dendrogram-"+t).find("#btn-right").hide())}(e,n),function(t){$("#show-dendrogram-"+t).click((function(){let t=$(this).attr("id");$(".show-dendrogram").each((function(e,n){$(n).attr("id")===t&&!1===$(n).hasClass("btn-primary")?($(n).addClass("btn-primary"),$(n).find("#btn-left").hide(),$(n).find("#btn-right").show()):($(n).removeClass("btn-primary"),$(n).find("#btn-left").show(),$(n).find("#btn-right").hide())})),$(".show-dendrogram.btn-primary").length?$("#dendrogram-panel").show():$("#dendrogram-panel").hide(),$("#play-button").hasClass("active")||(q(),V(),st())}))}(e),$("#dendrogram-buttons-div").show();else{let t=$("#show-dendrogram-"+e).hasClass("btn-primary");qt({},e),function(t){$("#show-dendrogram-"+t).next().remove(),$("#show-dendrogram-"+t).remove()}(e),d3.select("g.h"+e).remove(),!0===t&&$("#dendrogram-panel").hide(),0===$(".show-dendrogram").length&&$("#dendrogram-buttons-div").hide()}var r;$(".show-dendrogram").length?($("#main-vis-div").removeClass("col-md-12"),$("#main-vis-div").addClass("col-md-8")):($("#main-vis-div").removeClass("col-md-8"),$("#main-vis-div").addClass("col-md-12"))})),$(".network-hierarchy-checkbox").on("change",(function(){let t=$(this);$(".network-hierarchy-checkbox").prop("checked",!1),t.prop("checked",!0),t.prop("checked")?jt(t.attr("data")):jt(void 0)})),$(".set-button").click((function(){let t=$(this).find("input").attr("data");et=t,$("#play-button").hasClass("active")||(q(),V(),st())}))}function b(t){g="boolean"==typeof t&&t}function y(){b(!1),$("#play-button").removeClass("active"),$("#play-button").prop("disabled",!0),$("#play-icons").hide(),$("#play-loading").show()}function x(){b(!0),$("#play-button").addClass("active"),$("#play-button").prop("disabled",!1),$("#play-loading").hide(),$("#play-icons").show(),V()}function w(t){let e=[.05,.25,.5,.75,.95],n=[];if(0===t.length)return 0;t.sort((function(t,e){return t-e}));for(let r=0;r<e.length;r++){let a=(t.length-1)*e[r],i=Math.floor(a),o=i+1,l=a%1;o>=t.length?n.push(t[i]):n.push(t[i]*(1-l)+t[o]*l)}return n}function k(){$(".draw-details").click((function(){$(this).find("input:checkbox").prop("checked")?new O(this,Rt).disableLineChart():($(".trendChartData").hide(),$("#trendChartLegend").hide(),$("#lineChartLegend").show(),$(".lineChartButton").prop("checked",!0).prop("disabled",!1),$(".line-chart-check-box").attr("disabled",!1),$(".lineChartLine").attr("visibility","visible"))}))}String.prototype.hashCode=function(){var t,e=0;if(0===this.length)return e;for(t=0;t<this.length;t++)e=(e<<5)-e+this.charCodeAt(t),e|=0;return e},d3.selection.prototype.moveToBack=function(){return this.each((function(){var t=this.parentNode.firstChild;t&&this.parentNode.insertBefore(this,t)}))};let C,L,j,T={},_=1;class A{constructor(t){this.swarmData=t,this.swarm_features=Object.keys(this.swarmData[0]),this.lineChartWidth=5e3,this.trendChartsElem=["lower-outer-area","lower-inner-area","median-line","upper-inner-area","upper-outer-area"]}}class M extends A{constructor(t){super(t),this.lineChart()}lineChart(){_=Math.ceil(this.swarmData.length/this.lineChartWidth);let t=100,e=10,n=this.swarm_features,r=n.indexOf("time");n.splice(r,1);let a=[];if(this.swarmData.length>this.lineChartWidth){let t=new Array(n.length).fill(0);for(let e=0;e<this.swarmData.length;e++){for(let r=0;r<n.length;r++)t[r]+=this.swarmData[e][n[r]];if(e%_==0){let r={time:e/_};for(let e=0;e<n.length;e++)t[e]=t[e]/_,r[n[e]]=t[e];a.push(r),t=new Array(n.length).fill(0)}}}else a=this.swarmData;m=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]),L=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]);let i=d3.scaleLinear().domain([0,a.length]).range([0,this.lineChartWidth]),o=d3.axisBottom(L).ticks(10).tickSize(10).tickPadding(5).tickFormat((function(t){return Math.floor(t*_/1500)%60+":"+Math.floor(t*_/parameters.fps)%60+"::"+t*_%parameters.fps}));j=d3.scaleLinear().domain([0,100]).range([500,0]);let l=d3.axisLeft(j).ticks(0).tickSize(10).tickPadding(5),s=function(){let t=d3.mouse(this);if(t[0]<e||t[0]>this.lineChartWidth||t[1]<0||t[1]>500)return;let n=d3.scaleLinear().domain(m.range()).range(m.domain());Z(Math.floor(n(t[0]-e)*_))},d=d3.zoom().scaleExtent([1,20]).translateExtent([[0,0],[this.lineChartWidth,500]]).extent([[0,0],[this.lineChartWidth,500]]).on("zoom",(function(){let t=d3.event.transform;m=L.domain(t.rescaleX(i).domain());for(let t in h)h.hasOwnProperty(t)&&C.select("#"+t+"Line").attr("d",h[t]);for(let t in T)if(T.hasOwnProperty(t))for(let e=0;e<this.trendChartsElem.length;e++)C.select("#"+t+"TrendChart ."+this.trendChartsElem[e]).attr("d",T[t][this.trendChartsElem[e]]);p.call(o)})),c=d3.select("#swarm-vis").classed("svg-line-chart-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 "+this.lineChartWidth+" "+(500+t)).classed("svg-content",!0);C=c.append("svg:g").attr("id","lineChartZoom").attr("transform","translate("+e+",0)");let p=C.append("g").attr("class","x axis-line-chart").attr("transform","translate(0,500)").call(o);C.append("g").attr("class","y axis-line-chart").call(l),C.append("line").attr("class","time-line").attr("id","lineChartTimeLine").attr("x1",0).attr("y1",0).attr("x2",0).attr("y2",500);let u=d3.scaleOrdinal(d3.schemeCategory10),h={};for(let t=0;t<n.length;t++){let e=d3.min(a,(function(e){return e[n[t]]})),r=d3.max(a,(function(e){return e[n[t]]})),i=d3.scaleLinear().domain([e,r]).range([0,100]),o=d3.line().x((function(t){return L(t.time)})).y((function(e){return j(i(e[n[t]]))}));h[n[t]]=o,C.append("path").data([a]).attr("id",n[t]+"Line").attr("class","line lineChartLine").style("stroke",u(t)).attr("d",o).attr("name",n[t])}$("#lineChartTimeLine").appendTo("#lineChartZoom"),C.append("rect").attr("class","zoom").attr("width",this.lineChartWidth).attr("height",500).call(d).on("click",s).call(d3.drag().on("drag",s));let f=d3.selectAll(".line");c.append("g").attr("id","lineChartLegend").attr("transform","translate("+t+",550)").selectAll("rect.legend").data(f._groups[0]).enter().each((function(t,e){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",600*e+"px").style("fill",t.style.stroke),d3.select(this).append("text").attr("id",t.attributes.id.value+"LegendTitle").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*e+100+10+"px").text(t.attributes.name.value+": "),d3.select(this).append("text").attr("id",t.attributes.id.value+"Value").attr("class","line-chart-legend-text").attr("y",40).attr("x",600*e+100+d3.select("#"+t.attributes.id.value+"LegendTitle").node().getComputedTextLength()+10+"px").text("0.0")})),c.append("g").attr("id","trendChartLegend").attr("transform","translate("+t+",550)").selectAll("rect.legend").data(["5% - 95%","25% - 75%","Median"]).enter().each((function(t,e){d3.select(this).append("rect").attr("class","legend").attr("width",100).attr("height",50).attr("x",800*e+"px").style("fill",(function(){return 0===e?"#74a9cf":1===e?"#045a8d":"#525252"})),d3.select(this).append("text").attr("class","line-chart-legend-text").attr("y",40).attr("x",800*e+100+10+"px").text(t)})),$("#trendChartLegend").hide(),this.initLineChartButtons()}initLineChartButtons(){for(let t=0;t<this.swarm_features.length;t++){let e=this.swarm_features[t].split("_").join(" ");e=e.charAt(0).toUpperCase()+e.slice(1),$("#line-chart-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" class="line-chart-check-box" id="draw-'+this.swarm_features[t]+'" data="#'+this.swarm_features[t]+'Line" /><div class="state"><label>'+e+"</label></div></div></th></tr>")}$(".line-chart-check-box").change((function(){let t=$(this);t.prop("checked")?$(t.attr("data")).show():$(t.attr("data")).hide()}))}}class O extends A{constructor(t,e){super(e),this.elem=t,this.trendchart()}disableLineChart(){$(".lineChartButton").prop("checked",!1).prop("disabled",!0),$(".line-chart-check-box").attr("disabled",!0),$(".lineChartLine").attr("visibility","hidden")}trendchart(){let t="";if(this.elem.id.toLowerCase().includes("speed"))t="speed";else if(this.elem.id.toLowerCase().includes("acceleration"))t="acceleration";else if(this.elem.id.toLowerCase().includes("distance_centroid"))t="distance_centroid";else{if(!this.elem.id.toLowerCase().includes("midline_offset"))return;t="midline_offset"}if($("#lineChartLegend").hide(),$("#trendChartLegend").show(),$("#"+t+"TrendChart").length)$("#"+t+"TrendChart").show();else{let e=[],n=It.length;for(let r=0;r<Rt.length;r++){let a=[];for(let e=0;e<n;e++)Bt[r*n+e]&&a.push(Bt[r*n+e][t]);e.push(w(a))}if(e.length>this.lineChartWidth){let t=[],n=[0,0,0,0,0];for(let r=0;r<e.length;r++){for(let t=0;t<n.length;t++)n[t]+=e[r][t];if(r%_==0){for(let t=0;t<n.length;t++)n[t]+=n[t]/_;t.push(n),n=[0,0,0,0,0]}}e=t}let r=d3.min(e,(function(t){return t[0]})),a=d3.max(e,(function(t){return t[4]})),i=d3.scaleLinear().domain([r,a]).range([0,100]),o=C.append("g").attr("id",t+"TrendChart").attr("class","trendChartData");$(".zoom").appendTo("#lineChartZoom"),$("#lineChartTimeLine").appendTo("#lineChartZoom"),T[t]={};for(let n=0;n<this.trendChartsElem.length;n++){let r;n<2?r=d3.area().x((function(t,e){return L(e)})).y0((function(t){return j(i(t[n+1]))})).y1((function(t){return j(i(t[n]))})):2===n?r=d3.line().x((function(t,e){return L(e)})).y((function(t){return j(i(t[n]))})):n>2&&(r=d3.area().x((function(t,e){return L(e)})).y0((function(t){return j(i(t[n]))})).y1((function(t){return j(i(t[n-1]))}))),T[t][this.trendChartsElem[n]]=r,o.append("path").data([e]).attr("class",this.trendChartsElem[n]).attr("d",r)}}}}let E,S,D,z,B,U,R,N,W,P,I=0,G="black",H=-1,Y=[];function F(){let t=parameters.min.geometry.coordinates,e=parameters.max.geometry.coordinates;E=1.02*(e[0]-t[0]),S=1.02*(e[1]-t[1]);let n,i=d3.scaleLinear().domain([t[0],e[0]]).range([t[0],e[0]]),s=d3.axisBottom(i).ticks(10).tickSize(10).tickPadding(5),c=d3.scaleLinear().domain([t[1],e[1]]).range([t[1],e[1]]),p=d3.axisRight(c).ticks(7).tickSize(10).tickPadding(5),u=d3.zoom().scaleExtent([1,6]).on("zoom",(function(){d3.event.transform.x=Math.min(0,E*(d3.event.transform.k-1),Math.max(E*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,S*(d3.event.transform.k-1),Math.max(S*(1-d3.event.transform.k),d3.event.transform.y)),n.attr("transform",d3.event.transform),f.call(s.scale(d3.event.transform.rescaleX(i))),m.call(p.scale(d3.event.transform.rescaleY(c)))}));z=d3.select("#main-vis").classed("svg-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 "+E+" "+S).classed("svg-content",!0).attr("id","main-vis-svg").call(u);let h=Math.ceil(S/E*100);$("#main-vis").append($("<style>#main-vis::after {padding-top: "+h+'%;display: block;content: "";}</style> ')),n=z.append("svg:g"),parameters.background_image&&n.append("image").attr("xlink:href","/"+parameters.background_image).attr("class","background-image").attr("height",S).attr("width",E).attr("x","0").attr("y","0"),B=n.append("svg:g").attr("class","tank").attr("transform",(function(){return"scale("+(parameters.inverted_x?-1:1)+","+(parameters.inverted_y?-1:1)+")"})),B.append("g").attr("id","g-centroid").append("circle").attr("class","centroid").attr("r",6).attr("cx",0).attr("cy",0),B.select("#g-centroid").append("svg:defs").append("svg:marker").attr("id","centroid-arrow").attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),B.select("#g-centroid").append("line").attr("id","centroid-line").attr("marker-end","url(#centroid-arrow)"),B.append("g").attr("id","network-group"),B.append("g").attr("id","delaunay-triangulation-group"),B.append("g").attr("id","vornoi-group"),z.append("text").attr("class","frame-text").attr("x",30).attr("y",30).text("-- : -- : -- ");let f=z.append("g").attr("class","x axis").call(s),m=z.append("g").attr("class","y axis").call(p);a=d3.select("div.tooltip").style("left","0px").style("top","0px").on("mouseover",(function(){a.style("opacity",1)})),function(){r=$("#slider").slider({min:0,max:Rt.length,step:25,slide:function(t,e){Z(e.value),$("#play-button").hasClass("active")||V()}}),$("#network-slider").slider({range:"max",min:0,max:1,step:.01,value:.5,slide:function(t,e){Lt(e.value),$("#network-limit").val(e.value)}}),$("#network-limit").val(.5);let t=r.slider("option","max"),e=100/t;for(let n=0;n<t;n+=1500)$('<span class="ui-slider-tick"></span>').css("left",e*n+"%").appendTo(r)}(),o=d3.select("#main-vis-legend-div").append("svg").attr("id","main-vis-legend").attr("width",550).attr("height",60),d3.select(".colors-body").selectAll(".palette").data(d3.entries(colorbrewer)).enter().append("span").attr("class","palette").attr("title",(function(t){return t.key})).on("click",(function(t){$(".palette").removeClass("selected"),$('.palette[title="'+t.key+'"]').addClass("selected"),l.color=colorbrewer[t.key],d(),$("#play-button").hasClass("active")||(q(),V())})).selectAll(".swatch").data((function(t){return t.value})).enter().append("span").attr("class","swatch").style("background-color",(function(t){return t})),$('.palette[title="BuYlBu"]').addClass("selected");var g,b;new M(Rt);v(),function(){let t=d3.zoom().scaleExtent([1,10]).on("zoom",(function(){d3.event.transform.x=Math.min(0,5e3*(d3.event.transform.k-1),Math.max(5e3*(1-d3.event.transform.k),d3.event.transform.x)),d3.event.transform.y=Math.min(0,5e3*(d3.event.transform.k-1),Math.max(5e3*(1-d3.event.transform.k),d3.event.transform.y)),U.attr("transform",d3.event.transform)})),e=d3.select("#dendrogram-panel").classed("svg-dendrogram-container",!0).append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 5000 5000").classed("svg-content-dendrogram",!0).call(t);(function(){let t,e,n=d3.select("#dendrogram-panel").append("svg").attr("id","dendrogram-legend").attr("width",550).attr("height",60);$("#dendrogram-legend").hide();let r=nt.range();t=n.selectAll("rect.legend").data(r),e=n.selectAll("text.legend-text").data(["low","","","","","","","","high"]),t.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(t,e){return 50*e+"px"})).style("fill",(function(t){return t})),e.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(t,e){return 50*e+"px"})).text((function(t){return t}))})(),U=e.append("g").attr("transform","translate(20,20)").append("svg:g"),R=d3.tree().size([4800,4800]),W=d3.select(".tank"),$("#dendrogram-panel-level-slider").slider({range:"max",min:2,max:2,step:1,value:tt.h0,slide:function(t,e){ft($(".show-dendrogram.btn-primary").attr("data"),e.value),function(){let t=$(".show-dendrogram.btn-primary").attr("data"),e=$(".show-dendrogram.btn-primary").attr("name");$("#dendrogram-panel-name").text(e),$("#dendrogram-panel-level-slider").val(tt["h"+t]),$("#dendrogram-panel-level-text").text(tt["h"+t])}(),$("#play-button").hasClass("active")||(q(),V(),st())}}),N=d3.select("#dendrogram-tooltip").style("left","0px").style("top","0px").on("mouseover",(function(){N.style("opacity",1)}));let n=100*rt;P=d3.select("#hierarchy-legend-div").append("svg").attr("id","hierarchy-legend").attr("width",n).attr("height",60),W.append("defs").append("svg:pattern").attr("id","striped").attr("patternUnits","userSpaceOnUse").attr("width","20").attr("height","5").attr("patternTransform","rotate(60)").append("rect").attr("width",5).attr("height",10).attr("transform","translate(0,0)").style("fill","#67000d")}(),g=S,b=E,$((function(){$("#main-vis").draggable({containment:"parent"}).resizable({aspectRatio:!0,maxWidth:$("#main-vis-div").width()}).height(.6*g).width(.6*b)})),$("input[type=checkbox]").prop("checked",!1),$("#color-scale-linear").prop("checked",!0),$("#group-size-m").prop("checked",!0),$("#background-white").prop("checked",!0),$("#settings-div input[type=checkbox]").prop("checked",!0),$("#loading").hide(),$("#play-loading").hide(),$(".mdi-play").hide(),$("#metadata-input").hide(),$("#dendrogram-buttons-div").hide(),$("#g-centroid").hide(),$("#line-chart-feature-checkboxes input[type=checkbox]").prop("checked",!0),V()}function V(){let t=$('input[type="radio"].group-playback-rate:checked').val(),e=$('input[type="radio"].group-size:checked').val();D=Bt.filter((function(t){return t.t===I})),setTimeout((function(){var t;st(),z.select(".frame-text").text(Math.floor(I/1500)%60+":"+Math.floor(I/parameters.fps)%60+"::"+I%parameters.fps),I%parameters.fps==0&&(t=I,r.slider("value",t));let n,i=B.selectAll("g.animal").data(D);if(I in Wt){let t=Wt[I];if(ot={},t=t.map((function(t){let e=D.filter((function(e){return e.a===t.s}))[0],n=D.filter((function(e){return e.a===t.e}))[0];return{node1:e.a,node2:n.a,start:e.p,end:n.p,val:t.v}})),t.forEach((function(t){$("#mc-"+t.node1+"-"+t.node2).css("fill",$t(t.val)),$("#mc-"+t.node2+"-"+t.node1).css("fill",$t(t.val))})),bt){let e=[];for(let n=0;n<t.length;n++)e.push(t[n].val);Lt(function(t){if(0===t.length)return 0;t.sort((function(t,e){return t-e}));let e=.05*(t.length-1),n=Math.floor(e),r=n+1,a=e%1;return r>=t.length?1-t[n]:1-(t[n]*(1-a)+t[r]*a)}(e))}t=t.filter((function(t){return t.val<=1-yt})),n=B.select("#network-group").selectAll("line.network-edges").data(t),n.attr("x1",(function(t){return t.start[0]})).attr("y1",(function(t){return-t.start[1]})).attr("x2",(function(t){return t.end[0]})).attr("y2",(function(t){return-t.end[1]})).attr("stroke",(function(t){return $t(1-t.val)})).attr("stroke-opacity",(function(t){return 1-t.val})),n.enter().append("line").attr("class","network-edges").attr("x1",(function(t){return t.start[0]})).attr("y1",(function(t){return-t.start[1]})).attr("x2",(function(t){return t.end[0]})).attr("y2",(function(t){return-t.end[1]})).attr("stroke",(function(t){return $t(t.val)})).attr("stroke-opacity",(function(t){return t.val}))}else n=B.selectAll("line.network-edges").data([]);var o,l;n.exit().remove(),$("#draw-triangulation").is(":checked")?((o=B.select("#delaunay-triangulation-group").selectAll("path.delaunay-triangulation").data([Rt[I].triangulation])).attr("d",(function(t){return t})),o.enter().append("path").attr("class","delaunay-triangulation").attr("d",(function(t){return t}))):o=B.selectAll("path.delaunay-triangulation").data([]),o.exit().remove(),$("#draw-voronoi").is(":checked")?((l=B.select("#vornoi-group").selectAll("path.voronoi").data(Rt[I].voronoi.split(";"))).attr("d",(function(t){return t})),l.enter().append("path").attr("class","voronoi").attr("d",(function(t){return t}))):l=B.select("#vornoi-group").selectAll("path.voronoi").data([]),l.exit().remove();let d=i.enter().append("g").attr("class","animal").attr("id",(function(t){return"animal-"+t.a}));if(d.append("circle").attr("r",1.5*e).attr("cx",(function(t){return t.p[0]})).attr("cy",(function(t){return-t.p[1]})).on("mouseover",(function(t){!function(t){for(let e=0;e<Ut.length;e++)t.a===Ut[e].animal_id&&(a.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY-100+"px").style("opacity",1),a.select("#tooltip-animal-id").html(Ut[e].animal_id),a.select("#tooltip-species").html(Ut[e].species),a.select("#tooltip-sex").html(Ut[e].sex),a.select("#tooltip-size").html(Ut[e].size),a.select("#tooltip-weight").html(Ut[e].weight))}(t)})).on("mouseout",(function(){a.transition().duration(500).style("opacity",0)})).on("click",(function(t){Y.includes(t.a)?Y=Y.filter(e=>e!==t.a):Y.push(t.a),$("#play-button").hasClass("active")||(I--,V())})),i.select("circle").attr("cx",(function(t){return t.p[0]})).attr("cy",(function(t){return-t.p[1]})).attr("r",e),d.append("svg:defs").append("svg:marker").attr("id",(function(t){return"arrow-marker-"+t.a})).attr("refX",2).attr("refY",6).attr("markerWidth",13).attr("markerHeight",13).attr("orient","auto").append("svg:path").attr("d","M2,2 L2,11 L10,6 L2,2"),d.append("line").attr("class","arrow").attr("marker-end",(function(t){return"url(#arrow-marker-"+t.a+")"})),$("#draw-direction").is(":checked")?i.select("line").attr("x1",(function(t){return t.p[0]})).attr("y1",(function(t){return-t.p[1]})).attr("x2",(function(t){return t.p[0]+2*e})).attr("y2",(function(t){return-t.p[1]})).attr("transform",(function(t){return"rotate("+-t.direction+" "+t.p[0]+" "+-t.p[1]+")"})):$(".arrow").hide(),i.exit().remove(),$("#draw-convex-hull").is(":checked")){var p=B.selectAll("path.hull-path").data([Rt[I].convex_hull]);p.attr("d",(function(t){return t})),p.enter().append("path").attr("class","hull-path").attr("d",(function(t){return t}))}else p=B.select("path.hull-path").data([]);if(p.exit().remove(),"black"!==G){var u=s();i.transition().duration(10).style("fill",(function(t){return u(t[G])})).attr("stroke",(function(t){return u(t[G])}))}else i.style("fill","#000").attr("stroke","#000"),$.isEmptyObject(c)||Object.keys(c).forEach((function(t){d3.select("#animal-"+t).style("fill",c[t]).attr("stroke",c[t])}));Y.length?(i.style("opacity",(function(t){return Y.includes(t.a)?1:.25})),$("#remove-active-selected-button").is(":disabled")&&($("#remove-active-selected-button").prop("disabled",!1),$("#visual-parameter-button").prop("disabled",!1)),h.trackingBoolean&&Object(h.addTrackedData)(D[0].t,Y)):($("#remove-active-selected-button").is(":disabled")||($("#remove-active-selected-button").prop("disabled",!0),$("#visual-parameter-button").prop("disabled",!0)),i.style("opacity",1)),d3.select(".centroid").attr("cx",(function(){return"centroid"in Rt[0]?Rt[I].centroid[0]:0})).attr("cy",(function(){return"centroid"in Rt[0]?-Rt[I].centroid[1]:0})),$("#draw-direction").is(":checked")&&Rt[I].centroid&&$("#draw-centroid").is(":checked")?(d3.select("#centroid-line").classed("hidden",!1),d3.select("#centroid-line").attr("x1",(function(){return Rt[I].centroid[0]})).attr("y1",(function(){return-Rt[I].centroid[1]})).attr("x2",(function(){return Rt[I].centroid[0]+2*e})).attr("y2",(function(){return-Rt[I].centroid[1]})).attr("transform",(function(){return"rotate("+-Rt[I].direction+" "+Rt[I].centroid[0]+" "+-Rt[I].centroid[1]+")"}))):d3.select("#centroid-line").attr("class","hidden"),-1!==H&&(d3.selectAll("#animal-"+H).classed("medoid",!1),H=Rt[I].medoid,d3.selectAll("#animal-"+H).classed("medoid",!0)),I++,function(){if(d3.select("#lineChartTimeLine")&&Rt[Math.ceil(I/_)]){let t=Math.ceil(I/_);I%25==0&&(d3.select("#convex_hull_areaLineValue").text(Rt[t].convex_hull_area+"mm²"),d3.select("#speedLineValue").text(Rt[t].speed+"mm/s"),d3.select("#accelerationLineValue").text(Rt[t].acceleration+"mm/s²"),d3.select("#distance_centroidLineValue").text(Rt[t].distance_centroid+"mm"),d3.select("#directionLineValue").text(Rt[t].direction+"°"),d3.select("#polarisationLineValue").text(Rt[t].polarisation)),d3.select("#lineChartTimeLine").attr("transform","translate("+m(t)+",0)")}}(),I>=Rt.length?(I=0,V()):g&&V()}),t)}function Z(t){I="number"==typeof t&&I<=Rt.length?t:0}function q(){I-=1}function J(t){G=t}function X(t){H=t}function K(t){Y=t}let Q,tt={},et="union",nt=d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);const rt=4;let at=[],it={},ot={},lt=["#7fc97f","#386cb0","#e7298a","#ff9900"];function st(){if(Q=$(".show-dendrogram.btn-primary").attr("data"),!$.isEmptyObject(Pt)&&Q){let e=Pt["h"+Q][I],n=d3.hierarchy(e,(function(t){return t.children}));if(n=n.children[0],n.children.forEach(dt),n=R(n),console.log(n),$(".show-dendrogram.btn-primary").length){$("#dendrogram-panel-level-slider").slider("option","max",n.height-1).slider("value",tt["h"+Q]);let e=U.selectAll("path.link").data(n.descendants().slice(1));e.enter().append("path").attr("class","link").attr("d",ct),e.attr("d",ct),e.exit().remove();let r=U.selectAll(".node").data(n.descendants());var t=r.enter().append("g").attr("class",(function(t){return"node"+(t.children?" node--internal":" node--leaf")})).attr("transform",(function(t){return"translate("+t.x+","+t.y+")"}));t.append("circle").attr("r",(function(t){return t.depth===tt["h"+Q]?40+t.data.name.length:20+t.data.name.length})).attr("class",(function(t){if(t.depth===tt["h"+Q])return"active-level"})).attr("id",(function(t){return"h"+t.data.name.toString().hashCode()})).on("click",pt).on("mouseover",(function(t){N.style("left",d3.event.pageX+5+"px").style("top",d3.event.pageY+5+"px").style("opacity",1),N.select(".tooltip-span").html(t.data.name.toString()),function(t){let e=[];for(let n=0;n<t.length;n++){let r=W.select("#animal-"+t[n]),a=r.data()[0].p;e.push([a[0],-a[1]]),r.classed("animal-highlight",!0)}W.append("path").attr("class","highlight-hierarchy").attr("d","M"+d3.polygonHull(e).join("L")+"Z")}(t.data.name)})).on("mouseout",(function(){N.transition().duration(500).style("opacity",0),d3.selectAll(".animal").classed("animal-highlight",!1),d3.selectAll(".highlight-hierarchy").remove()})),t.append("text").attr("class","dendrogram-text").attr("x",150).attr("y",-150).text((function(t){return t.data.name.length})),t.attr("transform",(function(t){return"translate("+t.x+","+t.y+")"})),r.attr("transform",(function(t){return"translate("+t.x+","+t.y+")"})).select("circle").attr("r",(function(t){return t.depth===tt["h"+Q]?40+t.data.name.length:20+t.data.name.length})).attr("class",(function(t){return t.depth===tt["h"+Q]?"active-level":""})).attr("id",(function(t){return"h"+t.data.name.toString().hashCode()})),r.select("text").text((function(t){return t.data.name.length})),r.exit().remove(),Object.keys(ot).length?("none"==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").show(),setTimeout((function(){r.select("circle").style("fill",(function(t){return"h"+t.data.name.toString().hashCode()in ot?nt(function(t){if(t instanceof Array){let e=t.reduce((function(t,e){return t+e}),0)/t.length,n=t.map((function(t){return Math.pow(t-e,2)}));return Math.sqrt(n.reduce((function(t,e){return t+e}),0)/n.length)}}(ot["h"+t.data.name.toString().hashCode()])):t.depth!==tt["h"+Q]?"":"#000"}))}),250)):"none"!==$("#dendrogram-legend").css("display")&&$("#dendrogram-legend").hide()}}$.isEmptyObject(Pt)||function(){let t=Object.keys(Pt).map((function(t){return t.replace("h","")})),e=[];for(let n=0;n<t.length;n++){let r=Pt["h"+t[n]][I],a=d3.hierarchy(r,(function(t){return t.children}));a=R(a);let i=a.children[0];gt===t[n]&&(at=ut(i,t[n])),e.push(ht(ut(i,t[n])))}e.length;let n=W.selectAll("g.hierarchy-group").data(e);n.enter().append("g").attr("class",(function(e,n){return"intersection"===et?"hierarchy-group intersection":"sym-difference"===et?"hierarchy-group sym-difference":"hierarchy-group h"+t[n]})).style("fill",(function(e,n){return it["h"+t[n]]})).attr("stroke",(function(e,n){return it["h"+t[n]]})).moveToBack(),n.attr("class",(function(e,n){return"intersection"===et?"hierarchy-group intersection":"sym-difference"===et?"hierarchy-group sym-difference":"hierarchy-group h"+t[n]})),n.exit().remove();let r=n.selectAll("path.hierarchy-hull-path").data((function(t){return t}));r.enter().append("path").attr("class","hierarchy-hull-path").attr("d",(function(t){return"M"+t.join("L")+"Z"})),r.attr("d",(function(t){return"M"+t.join("L")+"Z"})),r.exit().remove()}()}function dt(t){t.children&&t.depth<=tt["h"+Q]?(t._children=t.children,t._children.forEach(dt)):t.children=null}function ct(t){return"M"+t.x+","+t.y+"V"+t.parent.y+"H"+t.parent.x}function pt(t){K(t.data.name),$("#play-button").hasClass("active")||(q(),V())}function ut(t,e){let n=[],r=tt["h"+e],a=t.children;for(let e=1;e<t.height;e++){if(a[0]&&a[0].depth===r){a.forEach((function(t){void 0!==t.data.name&&n.push(t.data.name)}));break}let t=[];a.forEach((function(e){void 0!==e.children&&(t=t.concat(e.children))})),a=t}return n}function ht(t){let e=[];return t.forEach((function(t){let n=[];for(let e=0;e<t.length;e++){let r=D.find(n=>n.a===t[e]);r&&n.push([r.p[0],-r.p[1]])}n.length>=3&&e.push(d3.polygonHull(n))})),e}function ft(t,e){tt["h"+t]=e}function mt(){let t,e;0!==Object.keys(it).length||0!==Object.keys(xt).length?$("#hierarchy-legend-div").show():$("#hierarchy-legend-div").hide();let n=[],r=[];if($(".show-dendrogram").each((function(t,e){null!=it["h"+$(e).attr("data")]&&null!=$(e).attr("name")&&(n.push(it["h"+$(e).attr("data")]),r.push($(e).attr("name")))})),0!==Object.keys(xt).length)for(let t in xt)-1===n.indexOf(xt[t])&&(n.push(xt[t]),r.push("Network"));t=P.selectAll("rect.legend").data(n),e=P.selectAll("text.legend-text").data(r),t.style("fill",(function(t){return t})),t.enter().append("rect").attr("class","legend").attr("width",50).attr("height",20).attr("y",0).attr("x",(function(t,e){return 50+2.5*e*50+"px"})).style("fill",(function(t){return t})),t.exit().remove(),e.text((function(t){return t})),e.enter().append("text").attr("class","legend-text").attr("y",40).attr("x",(function(t,e){return 50+2.5*e*50+"px"})).text((function(t){return t})),e.exit().remove()}let gt,vt,bt=!1,yt=.5,xt={},wt=!0,kt=1,$t=d3.scaleThreshold().domain([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]).range(["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);function Ct(t){bt=t}function Lt(t){yt=t}function jt(t){gt=t}function Tt(t){vt=t}function _t(t){t>=0?xt["h"+t]="#08306b":xt={},mt()}function At(t){wt=t}let Mt="application/vnd.api+json";var Ot;function Et(){let t=[];$.ajax({url:"/api/percentile/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(e){for(let n=0;n<e.length;n++)t[e[n].feature]=[e[n].min,e[n].p1,e[n].p2,e[n].p3,e[n].p5,e[n].p7,e[n].p8,e[n].p9,e[n].max];Ht(t),function(t){for(var e in t)if(t.hasOwnProperty(e)){let t=e.split("_").join(" ");t=t.charAt(0).toUpperCase()+t.slice(1),$("#absolute-feature-checkboxes").append('<tr><th> <div class="pretty p-switch p-fill p-bigger"><input type="checkbox" id="draw-'+e+'"/><div class="state"><label>'+t+'</label></div></div><div class="float-right draw-details" id="draw-'+e+'-details"><div class="pretty p-icon p-toggle p-plain"><input type="checkbox" id="draw-'+e+'-input" /><div class="state p-success-o p-on"><i class="mdi mdi-image-area"></i><label></label></div><div class="state p-off"><i class="mdi mdi-image-off"></i><label></label></div></div></div></th></tr>')}$(".draw-details").hide(),k()}(t)}})}function St(){$.ajax({url:"/api/dataset/networks/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(t){!function(t){if(t.length)for(let e=0;e<t.length;e++)t[e].finished&&$("#networks-hierarchies-table tbody").append("<tr><td>"+t[e].name+'</td> <td> <button type="button" class="btn btn-default" data='+t[e].network_id+" name="+t[e].name+'><span class="mdi mdi-graphql" aria-hidden="true"></span></button></td> <td><div class="pretty p-switch p-fill"><input type="checkbox" class="hiearchy-checkbox" data="'+t[e].network_id+'" name="'+t[e].name+'"><div class="state p-success"><label></label></div></div></td><td>---</td>');else $("#networks-hierarchies-table").append("There is no network data for this dataset")}(t)}})}function Dt(t){$.ajax({url:"/api/dataset/"+parameters.id+"/"+t,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(e){Vt(e,t),x()}})}function zt(t){y(),$.ajax({url:"/api/dataset/"+parameters.id+"/"+t,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(e){Ft(e,t),x()}})}n(1);let Bt=[],Ut=[],Rt=[],Nt={},Wt={},Pt={},It={};function Gt(t){Bt=Bt.concat(t)}function Ht(t){Nt=t}function Yt(t){Ut=t,function(){let t=["#fff","#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628"];if(Ut.length)for(let e=0;e<Ut.length;e++)$("#metadata-table").find("tbody").append($('<tr id="metadata-row-'+Ut[e].animal_id+'">').append($("<td>").append(Ut[e].animal_id)).append($("<td>").append(Ut[e].species)).append($("<td>").append(Ut[e].sex)).append($("<td>").append(Ut[e].size)).append($("<td>").append(Ut[e].weight)).append($("<td>").append('<div class="dropdown">\n                                              <a class="dropdown-toggle btn btn-default btn-color" data-toggle="dropdown" href="#">\n                                              <div id="preview" class="metadata-swatch" style="background-color:#fff"></div>\n                                              <input class="color-field" value="White" style="display:none;">\n                                              </a>\n                                              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel"> '+function(e){let n="";for(let r=0;r<t.length;r++)n+='<div class="metadata-swatch metadata-swatch-clickable" style="background-color:'+t[r]+'" value="'+e+'"></div>';return n}(Ut[e].animal_id)+"</ul></div>")));else $("#metadata-table").find("tbody").append("There is no metadata for this dataset")}()}function Ft(t,e){for(let n=0;n<t.length;n++)void 0===Rt[n]&&Rt.push({}),t[n]&&!isNaN(t[n])?Rt[n][e]=+t[n]:Rt[n][e]=t[n]}function Vt(t,e){for(let n=0;n<t.length;n++)void 0===Bt[n]&&Bt.push({}),Bt[n][e]=+t[n]}function Zt(t){Wt=t}function qt(t,e){0===Object.keys(t).length&&t.constructor===Object?(delete Pt["h"+e],delete tt["h"+e],function(t){delete it["h"+t]}(e)):(Pt["h"+e]=t,ft(e,2),function(t){for(let e in xt)if(e==="h"+t)return void(it["h"+t]=xt[e]);for(let e=0;e<lt.length;e++){let n=!0;for(let t in it)it.hasOwnProperty(t)&&it[t]===lt[e]&&(n=!1);if(n){if(0===Object.keys(xt).length)return void(it["h"+t]=lt[e]);for(let n in xt)if(xt[n]!==lt[e])return void(it["h"+t]=lt[e])}}}(e)),mt()}function Jt(t){It=t}$(document).ready((function(){window.EventSource?((Ot=new EventSource("/api/movement_only/"+parameters.id)).onmessage=function(t){"close"===t.data?(Ot.close(),window.setTimeout((function t(){$.active>0?window.setTimeout(t,100):F()}),100)):Gt(JSON.parse(t.data))},Ot.addEventListener("error",(function(t){t.readyState==EventSource.CLOSED&&alert("Streaming error")}),!1)):alert("Webbrowser does not support streaming"),Et(),$.ajax({url:"/api/dataset/"+parameters.id+"/animal_ids",dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(t){Jt(t)}}),function(){const t=["swarm_time","swarm_speed","swarm_acceleration","swarm_convex_hull_area","swarm_distance_centroid","swarm_direction","swarm_polarisation"];for(let e=0;e<t.length;e++)$.ajax({url:"/api/dataset/"+parameters.id+"/"+t[e],dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(n){Ft(n,t[e].replace("swarm_",""))}})}(),$.ajax({url:"/api/metadata/"+parameters.id,dataType:"json",type:"GET",contentType:"application/json; charset=utf-8",headers:{Accept:Mt},success:function(t){Yt(t)}}),St()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,